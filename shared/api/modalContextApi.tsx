// shared/api/modalContextApi.tsx
import React, { createContext, ReactNode, useContext, useState, useCallback } from 'react';
import { AlarmData } from '../../assets/data/alarmData';

/* ==============================
   ModalContext ÌÉÄÏûÖ Ï†ïÏùò
   ============================== */
interface ModalContextType {
  modalVisible: boolean;
  modalData: AlarmData | null;
  setModalVisible: (visible: boolean) => void;
  setModalData: (data: AlarmData | null) => void;
  showModal: (data: AlarmData) => void;
  hideModal: () => void;
}

/* ==============================
   Context ÏÉùÏÑ±
   ============================== */
const ModalContext = createContext<ModalContextType | undefined>(undefined);

/* ==============================
   Context Ï†ÑÏö© Ïª§Ïä§ÌÖÄ ÌõÖ
   ============================== */
export const useModal = () => {
  const context = useContext(ModalContext);
  if (!context) {
    throw new Error('useModal must be used within a ModalProvider');
  }
  return context;
};

/* ==============================
   ModalProvider Props ÌÉÄÏûÖ
   ============================== */
interface ModalProviderProps {
  children: ReactNode;
}

/* ==============================
   ModalProvider Ïª¥Ìè¨ÎÑåÌä∏
   ============================== */
export const ModalProvider: React.FC<ModalProviderProps> = ({ children }) => {
  const [modalVisible, setModalVisible] = useState(false);
  const [modalData, setModalData] = useState<AlarmData | null>(null);

  // Î™®Îã¨ ÌëúÏãú + Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï
  const showModal = useCallback((data: AlarmData) => {
    console.log('üé≠ modalContext showModal Ìò∏Ï∂úÎê®:', {
      alarmId: data.alarmId,
      regionName: data.regionName,
      status: data.status
    });

    setModalData(data);
    setModalVisible(true);

    console.log('üé≠ Î™®Îã¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å - visible: true');
  }, []);

  // Î™®Îã¨ Ïà®ÍπÄ + Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
  const hideModal = useCallback(() => {
    console.log('üé≠ Î™®Îã¨ Ïà®ÍπÄ ÏöîÏ≤≠');
    setModalVisible(false);
    // Ïï†ÎãàÎ©îÏù¥ÏÖòÏù¥ ÎÅùÎÇú ÌõÑ Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨
    setTimeout(() => {
      setModalData(null);
    }, 300);
  }, []);

  const contextValue: ModalContextType = {
    modalVisible,
    modalData,
    setModalVisible,
    setModalData,
    showModal,
    hideModal
  };

  return (
    <ModalContext.Provider value={contextValue}>
      {children}
    </ModalContext.Provider>
  );
};